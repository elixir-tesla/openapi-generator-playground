# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ThePlaidAPI.Model.PlaidError do
  @moduledoc """
  We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
  """

  @derive [Poison.Encoder]
  defstruct [
    :error_type,
    :error_code,
    :error_message,
    :display_message,
    :request_id,
    :causes,
    :status,
    :documentation_url,
    :suggested_action
  ]

  @type t :: %__MODULE__{
    :error_type => ThePlaidAPI.Model.PlaidErrorType.t,
    :error_code => String.t,
    :error_message => String.t,
    :display_message => String.t | nil,
    :request_id => String.t | nil,
    :causes => [any()] | nil,
    :status => float() | nil,
    :documentation_url => String.t | nil,
    :suggested_action => String.t | nil
  }
end

defimpl Poison.Decoder, for: ThePlaidAPI.Model.PlaidError do
  import ThePlaidAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:error_type, :struct, ThePlaidAPI.Model.PlaidErrorType, options)
  end
end

