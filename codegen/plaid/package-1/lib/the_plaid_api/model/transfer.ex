# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ThePlaidAPI.Model.Transfer do
  @moduledoc """
  Represents a transfer within the Transfers API.
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :ach_class,
    :account_id,
    :funding_account_id,
    :type,
    :user,
    :amount,
    :description,
    :created,
    :status,
    :sweep_status,
    :network,
    :cancellable,
    :failure_reason,
    :metadata,
    :origination_account_id,
    :guarantee_decision,
    :guarantee_decision_rationale,
    :iso_currency_code,
    :standard_return_window,
    :unauthorized_return_window,
    :expected_settlement_date,
    :originator_client_id,
    :refunds,
    :recurring_transfer_id,
    :settled_amount,
    :expected_settlement_schedule
  ]

  @type t :: %__MODULE__{
    :id => String.t,
    :ach_class => ThePlaidAPI.Model.AchClass.t | nil,
    :account_id => String.t | nil,
    :funding_account_id => String.t,
    :type => ThePlaidAPI.Model.TransferType.t,
    :user => ThePlaidAPI.Model.TransferUserInResponse.t,
    :amount => String.t,
    :description => String.t,
    :created => DateTime.t,
    :status => ThePlaidAPI.Model.TransferStatus.t,
    :sweep_status => ThePlaidAPI.Model.TransferSweepStatus.t | nil,
    :network => ThePlaidAPI.Model.TransferNetwork.t,
    :cancellable => boolean(),
    :failure_reason => ThePlaidAPI.Model.TransferFailure.t | nil,
    :metadata => %{optional(String.t) => String.t} | nil,
    :origination_account_id => String.t,
    :guarantee_decision => ThePlaidAPI.Model.TransferAuthorizationGuaranteeDecision.t | nil,
    :guarantee_decision_rationale => ThePlaidAPI.Model.TransferAuthorizationGuaranteeDecisionRationale.t | nil,
    :iso_currency_code => String.t,
    :standard_return_window => Date.t | nil,
    :unauthorized_return_window => Date.t | nil,
    :expected_settlement_date => Date.t | nil,
    :originator_client_id => String.t | nil,
    :refunds => [ThePlaidAPI.Model.TransferRefund.t],
    :recurring_transfer_id => String.t | nil,
    :settled_amount => String.t | nil,
    :expected_settlement_schedule => [ThePlaidAPI.Model.TransferExpectedSettlementScheduleItem.t] | nil
  }
end

defimpl Poison.Decoder, for: ThePlaidAPI.Model.Transfer do
  import ThePlaidAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:ach_class, :struct, ThePlaidAPI.Model.AchClass, options)
    |> deserialize(:type, :struct, ThePlaidAPI.Model.TransferType, options)
    |> deserialize(:user, :struct, ThePlaidAPI.Model.TransferUserInResponse, options)
    |> deserialize(:status, :struct, ThePlaidAPI.Model.TransferStatus, options)
    |> deserialize(:sweep_status, :struct, ThePlaidAPI.Model.TransferSweepStatus, options)
    |> deserialize(:network, :struct, ThePlaidAPI.Model.TransferNetwork, options)
    |> deserialize(:failure_reason, :struct, ThePlaidAPI.Model.TransferFailure, options)
    |> deserialize(:guarantee_decision, :struct, ThePlaidAPI.Model.TransferAuthorizationGuaranteeDecision, options)
    |> deserialize(:guarantee_decision_rationale, :struct, ThePlaidAPI.Model.TransferAuthorizationGuaranteeDecisionRationale, options)
    |> deserialize(:standard_return_window, :date, nil, options)
    |> deserialize(:unauthorized_return_window, :date, nil, options)
    |> deserialize(:expected_settlement_date, :date, nil, options)
    |> deserialize(:refunds, :list, ThePlaidAPI.Model.TransferRefund, options)
    |> deserialize(:expected_settlement_schedule, :list, ThePlaidAPI.Model.TransferExpectedSettlementScheduleItem, options)
  end
end

